#!/bin/bash


AMI="ami-5ac2cd4d"
INSTANCE_TYPE="t2.micro"
SECURITY_GROUP_NAME="team9SG"
KEYPAIR_NAME="team9KP"

echo "Creating a keypair to access the instance. The private key would be stored as $KEYPAIR_NAME.pem"
aws ec2 create-key-pair --key-name $KEYPAIR_NAME --query 'KeyMaterial' --output text > $KEYPAIR_NAME.pem

echo "Creating a security group"
SECURITY_GROUP=$(aws ec2 create-security-group --group-name $SECURITY_GROUP_NAME --description "My testsecurity group" | grep GroupId | awk '{print$2}' | tr -cd '[:alnum:]\n-')

echo "Getting subnet ID for the us-east-1e subnet and configuring for auto-assign Public IP"
SUBNET=$(aws ec2 describe-subnets | grep -A2 "us-east-1e" | grep SubnetId | awk '{print$2}' | tr -cd '[:alnum:]\n-')
aws ec2 modify-subnet-attribute --subnet-id $SUBNET --map-public-ip-on-launch

echo "Launching an instance with all the required options."
INSTANCE_ID=$(aws ec2 run-instances --image-id $AMI --count 1 --instance-type $INSTANCE_TYPE --key-name $KEYPAIR_NAME --security-group-ids $SECURITY_GROUP --subnet-id $SUBNET --region us-east-1 | grep InstanceId | awk '{print$2}' | tr -cd '[:alnum:]\n-')

echo "Checking if instance has reached running status.."

status=1
while [ $status == 1 ]; do
    INSTANCE_STATUS=$(aws ec2 describe-instance-status --instance-id $INSTANCE_ID  | grep -A3 "InstanceState" | grep "Name" | awk '{print$2}' | tr -cd '[:alnum:]\n')
    if [ "$INSTANCE_STATUS" == "running" ]; then
        status=0
        echo "Instance is ready!"
    else
        echo "Instance still not in running state. waiting for 30 seconds and then checking again."
        sleep 30
    fi
done

echo "Creating a magnetic volume"
VOLUME_ID=$(aws ec2 create-volume --size 10 --region us-east-1 --availability-zone us-east-1e --volume-type magnetic | grep VolumeId | awk '{print$2}' | tr -cd '[:alnum:]\n-')

echo "Attaching the volume to the instance"
aws ec2 attach-volume --volume-id $VOLUME_ID --instance-id $INSTANCE_ID --device /dev/sdf

echo "Authorizing security group access"
aws ec2 authorize-security-group-ingress --group-name $SECURITY_GROUP_NAME --protocol tcp --port 22 --cidr 0.0.0.0/0
aws ec2 authorize-security-group-ingress --group-name $SECURITY_GROUP_NAME --protocol tcp --port 80 --cidr 0.0.0.0/0
aws ec2 authorize-security-group-ingress --group-name $SECURITY_GROUP_NAME --protocol tcp --port 443 --cidr 0.0.0.0/0

echo "Getting the public IP of the instance"
PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID | grep PublicIpAddress | awk '{print$2}' | tr -cd '[:alnum:]\n.')
echo $PUBLIC_IP

echo "Tagging the instance"
aws ec2 create-tags --resources $INSTANCE_ID --tags 'Key="[Team-numberCC]",Value=9'

echo "Configuring Route 53 and pointing it to above IP address"

jq '.Changes[0].ResourceRecordSet.ResourceRecords[0].Value = "'$PUBLIC_IP'"' recordset.json > tmp.$$.json && mv tmp.$$.json recordset.json

aws route53 change-resource-record-sets --hosted-zone-id Z1DCCR05VXX18K --change-batch file://recordset.json
